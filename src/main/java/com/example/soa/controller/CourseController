// package com.example.soa.controller;

// import com.example.soa.dto.CourseDTO;
// import com.example.soa.Model.Course;
// import com.example.soa.Model.User;
// import com.example.soa.service.ContentService;
// import com.example.soa.exception.CourseNotFoundException;
// import com.example.soa.mapper.CourseMapper;
// import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
// import org.springframework.http.HttpStatus;
// import org.springframework.http.ResponseEntity;
// import org.springframework.web.bind.annotation.*;

// import org.slf4j.Logger;
// import org.slf4j.LoggerFactory;

// import java.util.List;
// import java.util.stream.Collectors;

// @RestController
// @RequestMapping("/api/courses")
// public class CourseController {

//     private static final Logger logger = LoggerFactory.getLogger(CourseController.class);

//     private final CourseService courseService;
//     private final CourseMapper courseMapper;

//     public CourseController(CourseService courseService, CourseMapper courseMapper) {
//         this.courseService = courseService;
//         this.courseMapper = courseMapper;
//     }

//     @PostMapping
//     public ResponseEntity<CourseDTO> createCourse(@RequestBody CourseDTO courseDTO) {
//         logger.info("Creating new course with title: {}", courseDTO.getTitle());
//         Course course = courseMapper.toCourse(courseDTO);
//         Course createdCourse = courseService.createCourse(course);
//         CourseDTO createdCourseDTO = courseMapper.toCourseDTO(createdCourse);
//         createdCourseDTO.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(CourseController.class).getCourseById(createdCourse.getCourseId())).withSelfRel());
//         logger.info("Course created successfully with ID: {}", createdCourse.getCourseId());
//         return new ResponseEntity<>(createdCourseDTO, HttpStatus.CREATED);
//     }

//     @GetMapping
//     public ResponseEntity<List<CourseDTO>> getAllCourses() {
//         logger.info("Fetching all courses");
//         List<Course> courses = courseService.getAllCourses();
//         List<CourseDTO> courseDTOs = courses.stream()
//                 .map(courseMapper::toCourseDTO)
//                 .collect(Collectors.toList());
//         courseDTOs.forEach(dto -> dto.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(CourseController.class).getCourseById(dto.getCourseId())).withSelfRel()));
//         logger.info("Fetched {} courses", courseDTOs.size());
//         return new ResponseEntity<>(courseDTOs, HttpStatus.OK);
//     }

//     @GetMapping("/{courseId}")
//     public ResponseEntity<CourseDTO> getCourseById(@PathVariable Long courseId) {
//         logger.info("Fetching course with ID: {}", courseId);
//         Course course = courseService.getCourseById(courseId)
//                 .orElseThrow(() -> new CourseNotFoundException("Course not found with ID: " + courseId));
//         CourseDTO courseDTO = courseMapper.toCourseDTO(course);
//         courseDTO.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(CourseController.class).getCourseById(courseId)).withSelfRel());
//         logger.info("Fetched course with ID: {}", courseId);
//         return new ResponseEntity<>(courseDTO, HttpStatus.OK);
//     }

//     @PutMapping("/{courseId}")
//     public ResponseEntity<CourseDTO> updateCourse(@PathVariable Long courseId, @RequestBody CourseDTO courseDTO) {
//         logger.info("Updating course with ID: {}", courseId);
//         Course course = courseMapper.toCourse(courseDTO);
//         Course updatedCourse = courseService.updateCourse(courseId, course);
//         CourseDTO updatedCourseDTO = courseMapper.toCourseDTO(updatedCourse);
//         updatedCourseDTO.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(CourseController.class).getCourseById(updatedCourse.getCourseId())).withSelfRel());
//         logger.info("Course updated successfully with ID: {}", updatedCourse.getCourseId());
//         return new ResponseEntity<>(updatedCourseDTO, HttpStatus.OK);
//     }

//     @DeleteMapping("/{courseId}")
//     public ResponseEntity<Void> deleteCourse(@PathVariable Long courseId) {
//         logger.info("Deleting course with ID: {}", courseId);
//         courseService.deleteCourse(courseId);
//         logger.info("Course deleted successfully with ID: {}", courseId);
//         return new ResponseEntity<>(HttpStatus.NO_CONTENT);
//     }

//     @PutMapping("/{courseId}/assignInstructor")
//     public ResponseEntity<CourseDTO> assignInstructor(@PathVariable Long courseId, @RequestParam Long instructorId) {
//         logger.info("Assigning instructor with ID: {} to course with ID: {}", instructorId, courseId);
//         Course course = courseService.assignInstructor(courseId, instructorId)
//                 .orElseThrow(() -> new CourseNotFoundException("Course not found with ID: " + courseId));
//         CourseDTO courseDTO = courseMapper.toCourseDTO(course);
//         courseDTO.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(CourseController.class).getCourseById(course.getCourseId())).withSelfRel());
//         logger.info("Instructor assigned successfully to course with ID: {}", courseId);
//         return new ResponseEntity<>(courseDTO, HttpStatus.OK);
//     }
// }