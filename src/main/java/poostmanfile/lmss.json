{
	"info": {
		"_postman_id": "5fe61c75-d1dc-4a23-8c86-594aed0d9160",
		"name": "Learning Management System API",
		"description": "A collection of tests for the Learning Management System API endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41721546"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User registered successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User registered successfully\");",
									"    pm.expect(jsonData.userId).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"testuser@example.com\",\n    \"password\": \"Password123!\",\n    \"role\": \"STUDENT\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.accessToken).to.exist;",
									"    pm.expect(jsonData.refreshToken).to.exist;",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.email).to.exist;",
									"    pm.expect(jsonData.name).to.exist;",
									"    pm.expect(jsonData.role).to.exist;",
									"    ",
									"    // Store token and user ID for subsequent requests",
									"    pm.collectionVariables.set(\"authToken\", jsonData.accessToken);",
									"    pm.collectionVariables.set(\"refreshToken\", jsonData.refreshToken);",
									"    pm.collectionVariables.set(\"userId\", jsonData.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@example.com\",\n    \"password\": \"NewPassword123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login to the system and get an access token"
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.email).to.exist;",
									"    pm.expect(jsonData.name).to.exist;",
									"    pm.expect(jsonData.role).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"me"
							]
						},
						"description": "Get information about the currently authenticated user"
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Token refresh successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.accessToken).to.exist;",
									"    pm.expect(jsonData.refreshToken).to.exist;",
									"    ",
									"    // Update token for subsequent requests",
									"    pm.collectionVariables.set(\"authToken\", jsonData.accessToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"refresh"
							]
						},
						"description": "Refresh the access token using a refresh token"
					},
					"response": []
				},
				{
					"name": "Change Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Password changed successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Password changed successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"oldPassword\": \"123456\",\r\n    \"newPassword\": \"NewPassword123!\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/change-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"change-password"
							]
						},
						"description": "Change the user's password"
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Reset email sent\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.contain(\"password reset instructions\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"ahmadsarawi2003@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/forgot-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"forgot-password"
							]
						},
						"description": "Request a password reset link"
					},
					"response": []
				},
				{
					"name": "Validate Reset Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Token is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.be.true;",
									"    pm.expect(jsonData.message).to.eql(\"Valid password reset token\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/auth/validate-reset-token?token=62b7b7e3-0692-4c34-8d13-744cc198666a",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"validate-reset-token"
							],
							"query": [
								{
									"key": "token",
									"value": "62b7b7e3-0692-4c34-8d13-744cc198666a"
								}
							]
						},
						"description": "Validate a password reset token"
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Password reset successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.eql(\"Password has been reset successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"newPassword\": \"NewPassword123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/reset-password?token=62b7b7e3-0692-4c34-8d13-744cc198666a",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"reset-password"
							],
							"query": [
								{
									"key": "token",
									"value": "62b7b7e3-0692-4c34-8d13-744cc198666a"
								}
							]
						},
						"description": "Reset password using a token"
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Logout successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Logged out successfully\");",
									"    ",
									"    // Clear tokens",
									"    pm.collectionVariables.set(\"authToken\", \"\");",
									"    pm.collectionVariables.set(\"refreshToken\", \"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						},
						"description": "Logout and invalidate the current session"
					},
					"response": []
				}
			],
			"description": "Authentication-related endpoints"
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User data is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.userId).to.exist;",
									"    pm.expect(jsonData.name).to.exist;",
									"    pm.expect(jsonData.email).to.exist;",
									"    pm.expect(jsonData.role).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "Get a user by their ID"
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.profileId).to.exist;",
									"    pm.expect(jsonData.bio).to.eql(\"This is my updated bio.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bio\": \"This is my updated bio.\",\n    \"profilePictureUrl\": \"https://example.com/profile.jpg\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"profile"
							]
						},
						"description": "Update a user's profile"
					},
					"response": []
				},
				{
					"name": "Upload Profile Picture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile picture uploaded successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.url).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "profilePicture",
									"type": "file",
									"src": "/path/to/profile-picture.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/profile/picture",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"profile",
								"picture"
							]
						},
						"description": "Upload a profile picture"
					},
					"response": []
				},
				{
					"name": "Get All Users (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Users list is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0].userId).to.exist;",
									"        pm.expect(jsonData[0].name).to.exist;",
									"        pm.expect(jsonData[0].email).to.exist;",
									"        pm.expect(jsonData[0].role).to.exist;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Get a list of all users (Admin only)"
					},
					"response": []
				},
				{
					"name": "Create User (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.userId).to.exist;",
									"    pm.expect(jsonData.name).to.eql(\"New Admin\");",
									"    pm.expect(jsonData.email).to.eql(\"newadmin@example.com\");",
									"    pm.expect(jsonData.role).to.eql(\"ADMIN\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"dada\",\n    \"email\": \"asdas@gmail.com\",\n    \"password\": \"a1s2sf2!\",\n    \"role\": \"STUDENT\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Create a new user (Admin only)"
					},
					"response": []
				},
				{
					"name": "Update User (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.userId).to.exist;",
									"    pm.expect(jsonData.name).to.eql(\"Updated Name\");",
									"    pm.expect(jsonData.email).to.eql(\"updated@example.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Name\",\n    \"email\": \"updated@example.com\",\n    \"role\": \"INSTRUCTOR\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "Update a user (Admin only)"
					},
					"response": []
				},
				{
					"name": "Update User Role (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User role updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.userId).to.exist;",
									"    pm.expect(jsonData.role).to.eql(\"INSTRUCTOR\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}/role?role=INSTRUCTOR",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"role"
							],
							"query": [
								{
									"key": "role",
									"value": "INSTRUCTOR"
								}
							]
						},
						"description": "Update a user's role (Admin only)"
					},
					"response": []
				},
				{
					"name": "Delete User (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "Delete a user (Admin only)"
					},
					"response": []
				},
				{
					"name": "Admin: Update User Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User role updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.userId).to.exist;",
									"    pm.expect(jsonData.role).to.eql(\"INSTRUCTOR\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/users/{{userId}}/role?role=INSTRUCTOR",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users",
								"{{userId}}",
								"role"
							],
							"query": [
								{
									"key": "role",
									"value": "INSTRUCTOR"
								}
							]
						},
						"description": "Update a user's role (Admin only)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Course Management",
			"item": [
				{
					"name": "Create Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Course created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.courseId).to.exist;",
									"    pm.collectionVariables.set(\"courseId\", jsonData.courseId);",
									"    pm.expect(jsonData.title).to.eql(\"Introduction to Programming\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Introduction to Programming\",\n    \"description\": \"Learn the basics of programming with this introductory course.\",\n    \"startDate\": \"2023-09-01\",\n    \"endDate\": \"2023-12-31\",\n    \"isActive\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/courses",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"courses"
							]
						},
						"description": "Create a new course"
					},
					"response": []
				},
				{
					"name": "Get All Courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Courses list is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0].courseId).to.exist;",
									"        pm.expect(jsonData[0].title).to.exist;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/courses",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"courses"
							]
						},
						"description": "Get a list of all courses"
					},
					"response": []
				},
				{
					"name": "Get Instructor Courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Instructor courses list is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/courses/instructor",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"courses",
								"instructor"
							]
						},
						"description": "Get courses where the authenticated user is the instructor"
					},
					"response": []
				},
				{
					"name": "Get Course By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Course data is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.courseId).to.exist;",
									"    pm.expect(jsonData.title).to.exist;",
									"    pm.expect(jsonData.description).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/courses/{{courseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}"
							]
						},
						"description": "Get a course by its ID"
					},
					"response": []
				},
				{
					"name": "Update Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Course updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.courseId).to.exist;",
									"    pm.expect(jsonData.title).to.eql(\"Updated Course Title\");",
									"    pm.expect(jsonData.description).to.eql(\"This is an updated course description.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Course Title\",\n    \"description\": \"This is an updated course description.\",\n    \"startDate\": \"2023-10-01\",\n    \"endDate\": \"2024-01-31\",\n    \"isActive\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/courses/{{courseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}"
							]
						},
						"description": "Update a course"
					},
					"response": []
				},
				{
					"name": "Assign Instructor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Instructor assigned successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.courseId).to.exist;",
									"    pm.expect(jsonData.instructorId).to.exist;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/courses/{{courseId}}/assignInstructor?instructorId=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"assignInstructor"
							],
							"query": [
								{
									"key": "instructorId",
									"value": "1"
								}
							]
						},
						"description": "Assign an instructor to a course"
					},
					"response": []
				},
				{
					"name": "Delete Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/courses/{{courseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}"
							]
						},
						"description": "Delete a course"
					},
					"response": []
				}
			]
		},
		{
			"name": "Module Management",
			"item": [
				{
					"name": "Get Modules by Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Modules list is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0].moduleId).to.exist;",
									"        pm.expect(jsonData[0].name).to.exist;",
									"        pm.collectionVariables.set(\"moduleId\", jsonData[0].moduleId);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/module/course/{{courseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"module",
								"course",
								"{{courseId}}"
							]
						},
						"description": "Get modules for a specific course"
					},
					"response": []
				},
				{
					"name": "Get Module by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Module data is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.moduleId).to.exist;",
									"    pm.expect(jsonData.name).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/module/{{moduleId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"module",
								"{{moduleId}}"
							]
						},
						"description": "Get a module by its ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "Content Management",
			"item": [
				{
					"name": "Upload Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content uploaded successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.contentId).to.exist;",
									"    pm.collectionVariables.set(\"contentId\", jsonData.contentId);",
									"    pm.expect(jsonData.title).to.eql(\"Lecture 1: Introduction\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"courseId\": 1,\r\n  \"title\": \"Introduction to Java Programming\",\r\n  \"type\": \"PDF\",\r\n  \"content\": \"This file contains Java programming fundamentals including variables, control structures, and object-oriented concepts.\",\r\n  \"description\": \"This is a comprehensive introduction to Java programming\",\r\n  \"urlFileLocation\": \"https://example.com/javadocs/drawio.pdf\",\r\n  \"fileSize\": 1048576,\r\n  \"fileType\": \"application/pdf\",\r\n  \"fileName\": \"drawio.pdf\",\r\n  \"isActive\": true,\r\n  \"orderIndex\": 1,\r\n  \"moduleId\": 1\r\n}"
						},
						"url": {
							"raw": "http://localhost:8081/api/content/upload-json",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"api",
								"content",
								"upload-json"
							]
						},
						"description": "Upload content to a course"
					},
					"response": []
				},
				{
					"name": "Get Course Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content list is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0].contentId).to.exist;",
									"        pm.expect(jsonData[0].title).to.exist;",
									"        pm.expect(jsonData[0].type).to.exist;",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/content/course/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"content",
								"course",
								"1"
							]
						},
						"description": "Get content for a specific course"
					},
					"response": []
				},
				{
					"name": "Get Content by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content data is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.contentId).to.exist;",
									"    pm.expect(jsonData.title).to.exist;",
									"    pm.expect(jsonData.type).to.exist;",
									"    pm.expect(jsonData.urlFileLocation).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/content/{{contentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"content",
								"{{contentId}}"
							]
						},
						"description": "Get content by its ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "Assessment Management",
			"item": [
				{
					"name": "Create Assessment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Assessment created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.assessmentId).to.exist;",
									"    pm.collectionVariables.set(\"assessmentId\", jsonData.assessmentId);",
									"    pm.expect(jsonData.title).to.eql(\"Midterm Exam\");",
									"    pm.expect(jsonData.type).to.eql(\"QUIZ\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"courseId\": {{courseId}},\n    \"title\": \"Midterm Exam\",\n    \"type\": \"QUIZ\",\n    \"totalMarks\": 100\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/assessment/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"assessment",
								"create"
							]
						},
						"description": "Create a new assessment"
					},
					"response": []
				},
				{
					"name": "Get Assessment By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Assessment data is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.assessmentId).to.exist;",
									"    pm.expect(jsonData.title).to.exist;",
									"    pm.expect(jsonData.type).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/assessment/{{assessmentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"assessment",
								"{{assessmentId}}"
							]
						},
						"description": "Get an assessment by its ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "Enrollment Management",
			"item": [
				{
					"name": "Enroll Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Student enrolled successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.enrollmentId).to.exist;",
									"    pm.collectionVariables.set(\"enrollmentId\", jsonData.enrollmentId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"courseId\": {{courseId}},\n    \"studentId\": {{userId}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/enrollments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"enrollments"
							]
						},
						"description": "Enroll a student in a course"
					},
					"response": []
				},
				{
					"name": "Get My Enrollments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Enrollments list is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0].enrollmentId).to.exist;",
									"        pm.expect(jsonData[0].courseId).to.exist;",
									"        pm.expect(jsonData[0].courseName).to.exist;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/enrollments/my",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"enrollments",
								"my"
							]
						},
						"description": "Get enrollments for the authenticated user"
					},
					"response": []
				},
				{
					"name": "Get Enrollments by Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Enrollments list is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/enrollments/student/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"enrollments",
								"student",
								"{{userId}}"
							]
						},
						"description": "Get enrollments for a specific student"
					},
					"response": []
				},
				{
					"name": "Update Progress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Progress updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.enrollmentId).to.exist;",
									"    pm.expect(jsonData.progress).to.eql(50);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"progress\": 50\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/enrollments/{{enrollmentId}}/progress",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"enrollments",
								"{{enrollmentId}}",
								"progress"
							]
						},
						"description": "Update enrollment progress"
					},
					"response": []
				},
				{
					"name": "Unenroll Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Student unenrolled successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Student successfully unenrolled from course\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/enrollments/course/{{courseId}}/student/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"enrollments",
								"course",
								"{{courseId}}",
								"student",
								"{{userId}}"
							]
						},
						"description": "Unenroll a student from a course"
					},
					"response": []
				}
			]
		},
		{
			"name": "Notification Management",
			"item": [
				{
					"name": "Create Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Notification created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.notificationId).to.exist;",
									"    pm.collectionVariables.set(\"notificationId\", jsonData.notificationId);",
									"    pm.expect(jsonData.title).to.eql(\"New Course Available\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"New Course Available\",\n    \"message\": \"A new course has been added to the platform.\",\n    \"recipientEmail\": \"admin@example.com\",\n    \"type\": \"COURSE\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/notifications/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"notifications",
								"create"
							]
						},
						"description": "Create a new notification"
					},
					"response": []
				},
				{
					"name": "Get All Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Notifications list is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0].notificationId).to.exist;",
									"        pm.expect(jsonData[0].title).to.exist;",
									"        pm.expect(jsonData[0].message).to.exist;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"notifications"
							]
						},
						"description": "Get all notifications for the authenticated user"
					},
					"response": []
				},
				{
					"name": "Get Unread Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Unread notifications list is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0].notificationId).to.exist;",
									"        pm.expect(jsonData[0].read).to.be.false;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/notifications/unread",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"notifications",
								"unread"
							]
						},
						"description": "Get unread notifications for the authenticated user"
					},
					"response": []
				},
				{
					"name": "Get Notification Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Notification count is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.unread).to.exist;",
									"    pm.expect(jsonData.total).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/notifications/count",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"notifications",
								"count"
							]
						},
						"description": "Get notification count for the authenticated user"
					},
					"response": []
				},
				{
					"name": "Mark Notification as Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Notification marked as read\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.notificationId).to.exist;",
									"    pm.expect(jsonData.read).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/notifications/{{notificationId}}/read",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"notifications",
								"{{notificationId}}",
								"read"
							]
						},
						"description": "Mark a notification as read"
					},
					"response": []
				},
				{
					"name": "Update Notification Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Notification status updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.notificationId).to.exist;",
									"    pm.expect(jsonData.status).to.eql(\"DELIVERED\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/notifications/{{notificationId}}/status/PENDING",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"notifications",
								"{{notificationId}}",
								"status",
								"PENDING"
							]
						},
						"description": "Update a notification's status"
					},
					"response": []
				},
				{
					"name": "Get Notifications by Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filtered notifications list is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0].status).to.eql(\"DELIVERED\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/notifications/status/READ",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"notifications",
								"status",
								"READ"
							]
						},
						"description": "Get notifications by status"
					},
					"response": []
				},
				{
					"name": "Delete Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/notifications/{{notificationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"notifications",
								"{{notificationId}}"
							]
						},
						"description": "Delete a notification"
					},
					"response": []
				}
			]
		},
		{
			"name": "Quiz Management",
			"item": [
				{
					"name": "Create Quiz",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Quiz created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.collectionVariables.set(\"quizId\", jsonData.id);",
									"    pm.expect(jsonData.title).to.eql(\"Week 1 Quiz\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Week 1 Quiz\",\n    \"description\": \"Quiz covering week 1 material\",\n    \"courseId\": {{courseId}},\n    \"timeLimit\": 30,\n    \"isActive\": true,\n    \"totalPoints\": 100\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/quizzes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"quizzes"
							]
						},
						"description": "Create a new quiz"
					},
					"response": []
				},
				{
					"name": "Get Quiz By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Quiz data is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.title).to.exist;",
									"    pm.expect(jsonData.questions).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/quizzes/{{quizId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"quizzes",
								"{{quizId}}"
							]
						},
						"description": "Get a quiz by its ID"
					},
					"response": []
				},
				{
					"name": "Get All Quizzes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Quizzes list is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0].id).to.exist;",
									"        pm.expect(jsonData[0].title).to.exist;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/quizzes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"quizzes"
							]
						},
						"description": "Get a list of all quizzes"
					},
					"response": []
				},
				{
					"name": "Get Active Quizzes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Active quizzes list is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0].id).to.exist;",
									"        pm.expect(jsonData[0].isActive).to.be.true;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/quizzes?active=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"quizzes"
							],
							"query": [
								{
									"key": "active",
									"value": "true"
								}
							]
						},
						"description": "Get a list of active quizzes"
					},
					"response": []
				},
				{
					"name": "Update Quiz",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Quiz updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.title).to.eql(\"Updated Quiz Title\");",
									"    pm.expect(jsonData.description).to.eql(\"Updated quiz description\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Quiz Title\",\n    \"description\": \"Updated quiz description\",\n    \"timeLimit\": 45,\n    \"isActive\": true,\n    \"totalPoints\": 120\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/quizzes/{{quizId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"quizzes",
								"{{quizId}}"
							]
						},
						"description": "Update a quiz"
					},
					"response": []
				},
				{
					"name": "Submit Quiz",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Quiz submission successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.quizId).to.exist;",
									"    pm.expect(jsonData.studentId).to.exist;",
									"    pm.expect(jsonData.score).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"1\": \"To initialize objects\",\n    \"2\": \"Inheritance is the concept where a class can inherit properties and behaviors from another class. It allows for code reuse and establishes a relationship between a parent class and a child class.\",\n    \"3\": \"Java Virtual Machine\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/quizzes/{{quizId}}/submit?studentId={{userId}}&timeSpentInSeconds=1200",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"quizzes",
								"{{quizId}}",
								"submit"
							],
							"query": [
								{
									"key": "studentId",
									"value": "{{userId}}"
								},
								{
									"key": "timeSpentInSeconds",
									"value": "1200"
								}
							]
						},
						"description": "Submit answers for a quiz"
					},
					"response": []
				},
				{
					"name": "Get Quiz Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Quiz statistics are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.averageScore).to.exist;",
									"    pm.expect(jsonData.highestScore).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/quizzes/{{quizId}}/statistics",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"quizzes",
								"{{quizId}}",
								"statistics"
							]
						},
						"description": "Get statistics for a quiz"
					},
					"response": []
				},
				{
					"name": "Delete Quiz",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/quizzes/{{quizId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"quizzes",
								"{{quizId}}"
							]
						},
						"description": "Delete a quiz"
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Users list is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						},
						"description": "Get a list of all users (Admin only)"
					},
					"response": []
				},
				{
					"name": "Get User By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User data is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.userId).to.exist;",
									"    pm.expect(jsonData.name).to.exist;",
									"    pm.expect(jsonData.email).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users",
								"{{userId}}"
							]
						},
						"description": "Get a user by ID (Admin only)"
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.userId).to.exist;",
									"    pm.expect(jsonData.name).to.eql(\"New User\");",
									"    pm.expect(jsonData.email).to.eql(\"newuser@example.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New User\",\n    \"email\": \"newuser@example.com\",\n    \"password\": \"Password123!\",\n    \"role\": \"STUDENT\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						},
						"description": "Create a new user (Admin only)"
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.userId).to.exist;",
									"    pm.expect(jsonData.name).to.eql(\"Updated Name\");",
									"    pm.expect(jsonData.email).to.eql(\"updated@example.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Name\",\n    \"email\": \"updated@example.com\",\n    \"role\": \"INSTRUCTOR\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users",
								"{{userId}}"
							]
						},
						"description": "Update a user (Admin only)"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users",
								"{{userId}}"
							]
						},
						"description": "Delete a user (Admin only)"
					},
					"response": []
				}
			]
		},
		{
			"name": "{{base_url}}/json",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/json",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"json"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "refreshToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "courseId",
			"value": "",
			"type": "string"
		},
		{
			"key": "contentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "moduleId",
			"value": "",
			"type": "string"
		},
		{
			"key": "assessmentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "enrollmentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "notificationId",
			"value": "",
			"type": "string"
		},
		{
			"key": "quizId",
			"value": ""
		}
	]
}